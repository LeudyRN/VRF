const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const pool = require("../config/db");
const router = express.Router();
require("dotenv").config();

// Mensajes de error gen√©ricos
const GENERIC_ERROR_MESSAGE = "Usuario o contrase√±a incorrectos.";

// Generar Access Token
const generateAccessToken = (userId, usuario) => {
  return jwt.sign({ id: userId, usuario }, process.env.ACCESS_TOKEN_SECRET, {
    expiresIn: "15m", // Duraci√≥n de 15 minutos
  });
};

// Generar Refresh Token
const generateRefreshToken = (userId, usuario) => {
  return jwt.sign({ id: userId, usuario }, process.env.REFRESH_TOKEN_SECRET, {
    expiresIn: "15m", // Duraci√≥n de 7 d√≠as
  });
};

router.post("/", async (req, res) => {
  const { usuario, contrase√±a } = req.body;

  if (!usuario || !contrase√±a) {
    return res.status(400).json({ error: "Usuario y contrase√±a son obligatorios." });
  }

  try {
    // Buscar al usuario en la base de datos
    const [users] = await pool.query(
      "SELECT id, nombre, usuario, contrase√±a_hash, tarjeta_registrada FROM usuarios WHERE usuario = ?",
      [usuario]
    );

    if (users.length === 0) {
      return res.status(401).json({ error: "Usuario o contrase√±a incorrectos." });
    }

    const user = users[0];

    // Comparar la contrase√±a con el hash almacenado
    const validPassword = await bcrypt.compare(contrase√±a, user.contrase√±a_hash);

    if (!validPassword) {
      return res.status(401).json({ error: "Usuario o contrase√±a incorrectos." });
    }

    // ‚úÖ Generar nuevos tokens
    const accessToken = generateAccessToken(user.id, user.usuario);
    const refreshToken = generateRefreshToken(user.id, user.usuario);

    // ‚úÖ Guardar el refreshToken en la base de datos
    await pool.query("UPDATE usuarios SET refresh_token = ? WHERE id = ?", [refreshToken, user.id]);

    console.log("‚úÖ RefreshToken actualizado correctamente en la base de datos.");

    // üî• Almacenar el `refreshToken` en `httpOnly` cookies para mayor seguridad
    res.cookie("refreshToken", refreshToken, {
      httpOnly: true,
      secure: true,
      sameSite: "Strict",
      maxAge: 7 * 24 * 60 * 60 * 1000, // Expira en 7 d√≠as
    });

    // üîπ **Enviar `refreshToken` junto con `accessToken` en la respuesta JSON**
    res.status(200).json({
      message: "Inicio de sesi√≥n exitoso.",
      accessToken,
      refreshToken, // üî• **Antes faltaba esta l√≠nea, ahora el frontend lo recibir√° correctamente.**
      redirectToRegisterCard: !user.tarjeta_registrada,
    });
  } catch (error) {
    console.error("‚ùå Error al iniciar sesi√≥n:", error.message);
    res.status(500).json({ error: "Error en el servidor. Int√©ntalo nuevamente." });
  }
});

module.exports = router;